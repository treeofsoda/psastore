name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}

# ──────────────────────────────────────────────────────────
# 1️⃣ BUILD & TEST  → 2️⃣ SONAR SCAN → 3️⃣ DOCKERIZE → 4️⃣ DEPLOY
# ──────────────────────────────────────────────────────────
jobs:
  # ---------- 1️⃣ Build & Test ----------
  build-test:
    name: "🔨 Build & Test (${{ matrix.service }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - psastoreadmin
          - psastoreaccess
          - psastoregateway
          - psastorewatch
          - psastoreweb
          - psastoresearch
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven package & unit test
        run: mvn --batch-mode clean package -pl ${{ matrix.service }} -am

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/*.jar

  # ---------- 2️⃣ SonarCloud Scan ----------
  scan:
   name: "🔍 Sonar Scan (${{ matrix.service }})"
   needs: build-test
   runs-on: ubuntu-latest
   strategy:
     matrix:
       service:
         - psastoreadmin
        #  - psastoreaccess
        #  - psastoregateway
        #  - psastorewatch
        #  - psastoreweb
        #  - psastoresearch
   steps:
     - uses: actions/checkout@v4

     - name: Build for Sonar
       working-directory: .
       run: mvn --batch-mode test-compile

     - name: SonarCloud Scan
       uses: SonarSource/sonarcloud-github-action@v2
       with:
         projectBaseDir: ${{ matrix.service }}
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ---------- 3️⃣ Docker Build & Push ----------
  dockerize:
    name: "🐳 Build & Push Image (${{ matrix.service }})"
#    needs: scan
    needs: build-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - psastoreadmin
          - psastoreaccess
          - psastoregateway
          - psastorewatch
          - psastoreweb
          - psastoresearch
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & push image
        run: |
          docker build -t $REGISTRY/${{ matrix.service }}:latest ./${{ matrix.service }}
          docker push $REGISTRY/${{ matrix.service }}:latest

  # ---------- 4️⃣ Deploy to GCP VM ----------
  deploy:
    name: "🚀 Deploy (${{ matrix.service }})"
    needs: dockerize
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: psastoreadmin   # ⬇ 对应脚本路径
            script: scripts/deploy-psastoreadmin.sh
          - service: psastoreaccess
            script: scripts/deploy-psastoreaccess.sh
          - service: psastoregateway
            script: scripts/deploy-psastoregateway.sh
          - service: psastorewatch
            script: scripts/deploy-psastorewatch.sh
          - service: psastoreweb
            script: scripts/deploy-psastoreweb.sh
          - service: psastoresearch
            script: scripts/deploy-psastoresearch.sh

    steps:
      - uses: actions/checkout@v4

      - name: Read deploy script
        id: read_script
        run: |
          echo "CONTENT<<EOF" >> $GITHUB_OUTPUT
          cat ${{ matrix.script }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: SSH & run deploy script
        uses: appleboy/ssh-action@v1.0.0
        env:
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ matrix.service }}:latest
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          envs: DOCKER_IMAGE
          script: |
            cat >/tmp/deploy-${{ matrix.service }}.sh <<'EOF'
            ${{ steps.read_script.outputs.CONTENT }}
            EOF
            chmod +x /tmp/deploy-${{ matrix.service }}.sh
            bash /tmp/deploy-${{ matrix.service }}.sh